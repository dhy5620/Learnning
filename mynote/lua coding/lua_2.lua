-- lua中的变量类型
--[[table类型实现了关联数组，关联数组是一种具有特殊索引方式的数组；不仅可以通过整数来索引它，还可以使用字符串或其它类型的值（除了nil）来索引它。此外，table没有固定的大小，可以动态得添加任意数量的元素到一个table中。

在Lua中，table既不是“值”，也不是“变量”，而是对象。可以将table想象成一种动态分配的对象，程序中仅仅有一个队它们的引用（指针）。table的创建是通过“构造表达式”完成的，最简单的构造表达式就是{}。

table永远是匿名的，一个引用table的变量与table自身之间没有固定的关联性，例如以下代码：
]]
local a = {} -- 创建一个table，并将它的引用存储在a 
a["x"] = 10 
local b = a -- b与a引用同一个table 
print(b["x"]) 
b["x"] = 20 
print(a["x"])

--在Lua 5.1中，长度操作符“#”用于返回一个数组或线性表的最后一个索引值。在实际项目中，我们经常使用该操作符来获取数组或线性表的长度。但是使用该操作符是存在陷阱的，比如下面一段代码：
local a = {}
a[1000] = 1
print(#a)
--这该输出多少呢？
--[[在Lua中，对于所有未初始化的元素的索引结果都是nil。Lua将nil作为界定数组结尾的标志。当一个数组有“空隙”时，即中间含有nil时，长度操作符会认为这些nil元素就是结尾标记。
因为a[1] = nil，所以，对于上述代码的输出应该是0。
所以，在处理table的时候，需要考虑这个问题。那么对于含有nil的table，如何获取它的长度呢？我们可以使用table.maxn，它将返回一个table的最大正索引数，如下所示：]]
local a = {}
a[1000] = 1
print(table.maxn(a)) -->1000
